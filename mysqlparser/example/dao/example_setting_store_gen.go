// Autogenerated by github.com/jxsiss/dbhlp/mysqlparser/gen/run.
// DO NOT EDIT.

package dao

import (
	"context"

	"github.com/jxskiss/errors"
	"gorm.io/gorm"

	"github.com/jxskiss/dbhlp"

	"github.com/jxskiss/dbhlp/mysqlparser/example/model"
)

const tableName_ExampleSetting = "example_setting"

type ExampleSettingDAO interface {
	Get(ctx context.Context, id int64, opts ...dbhlp.Opt) (*model.ExampleSetting, error)
	GetWhere(ctx context.Context, where string, paramsAndOpts ...interface{}) (*model.ExampleSetting, error)
	MGet(ctx context.Context, idList []int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error)
	MGetWhere(ctx context.Context, where string, paramsAndOpts ...interface{}) (model.ExampleSettingList, error)
	Update(ctx context.Context, id int64, updates map[string]interface{}, opts ...dbhlp.Opt) error
	GetByTenantIdUserId(ctx context.Context, tenantId int64, userId int64, opts ...dbhlp.Opt) (*model.ExampleSetting, error)
	GetCheckIsSomething(ctx context.Context, tenantId int64, isSomething bool, opts ...dbhlp.Opt) (*model.ExampleSetting, error)
	MGetByUserIDs(ctx context.Context, tenantId int64, userIdList []int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error)
	MGetByUserIdRange(ctx context.Context, tenantId int64, userId int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error)
	ListByTenantId(ctx context.Context, tenantId int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error)
	exampleSettingCustomMethods
}

func GetExampleSettingDAO(conn dbhlp.MySQLConn) ExampleSettingDAO {
	return &exampleSettingDAOImpl{
		db: conn,
	}
}

type exampleSettingDAOImpl struct {
	db *gorm.DB
}

func (p *exampleSettingDAOImpl) Get(ctx context.Context, id int64, opts ...dbhlp.Opt) (*model.ExampleSetting, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out = &model.ExampleSetting{}
	err := conn.WithContext(ctx).Table(tableName).Where("id = ?", id).First(out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) GetWhere(ctx context.Context, where string, paramsAndOpts ...interface{}) (*model.ExampleSetting, error) {
	params, opts := dbhlp.SplitOpts(paramsAndOpts)
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out = &model.ExampleSetting{}
	err := conn.WithContext(ctx).Table(tableName).Where(where, params...).First(out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) MGet(ctx context.Context, idList []int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out model.ExampleSettingList
	err := conn.WithContext(ctx).Table(tableName).Where("id in (?)", idList).Find(&out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) MGetWhere(ctx context.Context, where string, paramsAndOpts ...interface{}) (model.ExampleSettingList, error) {
	params, opts := dbhlp.SplitOpts(paramsAndOpts)
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out model.ExampleSettingList
	err := conn.WithContext(ctx).Table(tableName).Where(where, params...).Find(&out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) Update(ctx context.Context, id int64, updates map[string]interface{}, opts ...dbhlp.Opt) error {
	if len(updates) == 0 {
		return errors.New("programming error: empty updates map")
	}
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	err := conn.WithContext(ctx).Table(tableName).Where("id = ?", id).Updates(updates).Error
	if err != nil {
		return errors.AddStack(err)
	}
	return nil
}

func (p *exampleSettingDAOImpl) GetByTenantIdUserId(ctx context.Context, tenantId int64, userId int64, opts ...dbhlp.Opt) (*model.ExampleSetting, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out = &model.ExampleSetting{}
	err := conn.WithContext(ctx).Table(tableName).
		Where("tenant_id = ? and user_id = ?", tenantId, userId).
		First(out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) GetCheckIsSomething(ctx context.Context, tenantId int64, isSomething bool, opts ...dbhlp.Opt) (*model.ExampleSetting, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out = &model.ExampleSetting{}
	err := conn.WithContext(ctx).Table(tableName).
		Where("tenant_id = ? and is_something = ?", tenantId, isSomething).
		First(out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) MGetByUserIDs(ctx context.Context, tenantId int64, userIdList []int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out model.ExampleSettingList
	err := conn.WithContext(ctx).Table(tableName).
		Where("tenant_id = ? and user_id in (?)", tenantId, userIdList).
		Find(&out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) MGetByUserIdRange(ctx context.Context, tenantId int64, userId int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out model.ExampleSettingList
	err := conn.WithContext(ctx).Table(tableName).
		Where("tenant_id = ? and user_id >= ?", tenantId, userId).
		Find(&out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

func (p *exampleSettingDAOImpl) ListByTenantId(ctx context.Context, tenantId int64, opts ...dbhlp.Opt) (model.ExampleSettingList, error) {
	conn := dbhlp.GetSession(p.db, opts...)
	tableName := tableName_ExampleSetting
	var out model.ExampleSettingList
	err := conn.WithContext(ctx).Table(tableName).
		Where("tenant_id = ?", tenantId).
		Find(&out).Error
	if err != nil {
		return nil, errors.AddStack(err)
	}
	return out, nil
}

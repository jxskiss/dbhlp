// Autogenerated by github.com/jxsiss/dbhlp/mysqlparser/gen/run.
// DO NOT EDIT.

package model

import (
	"context"
	"encoding/json"
	"log"
	"time"

	"github.com/jxskiss/dbhlp"
	"github.com/jxskiss/errors"
	"github.com/jxskiss/gopkg/v2/utils/sqlutil"
	"google.golang.org/protobuf/proto"
	"gorm.io/gorm"
)

var _ context.Context
var _ json.Marshaler
var _ log.Logger
var _ time.Time
var _ dbhlp.Opt
var _ errors.ErrorGroup
var _ sqlutil.LazyBinary
var _ gorm.DB
var _ proto.Message

type ExampleSetting struct {
	Id            int64               `db:"id" gorm:"column:id;primaryKey"`                  // bigint(20) UNSIGNED
	TenantId      int64               `db:"tenant_id" gorm:"column:tenant_id"`               // bigint(20) UNSIGNED
	UserId        int64               `db:"user_id" gorm:"column:user_id"`                   // bigint(20) UNSIGNED
	SomeJsonData1 sqlutil.LazyBinary  `db:"some_json_data_1" gorm:"column:some_json_data_1"` // text
	SomeJsonData2 sqlutil.LazyBinary  `db:"some_json_data_2" gorm:"column:some_json_data_2"` // text
	Config        sqlutil.LazyBinary  `db:"config" gorm:"column:config"`                     // blob BINARY
	Status        sqlutil.Bitmap[int] `db:"status" gorm:"column:status"`                     // int(11) UNSIGNED
	IsSomething   bool                `db:"is_something" gorm:"column:is_something"`         // tinyint(4)
	NameHash      []byte              `db:"name_hash" gorm:"column:name_hash"`               // varbinary(72) BINARY
	CreateTime    time.Time           `db:"create_time" gorm:"column:create_time"`           // datetime
	UpdateTime    time.Time           `db:"update_time" gorm:"column:update_time"`           // datetime
}

type ExampleSettingList []*ExampleSetting

func (p ExampleSettingList) ToIdMap() map[int64]*ExampleSetting {
	out := make(map[int64]*ExampleSetting, len(p))
	for _, x := range p {
		out[x.Id] = x
	}
	return out
}

func (p ExampleSettingList) PluckIds() []int64 {
	out := make([]int64, 0, len(p))
	for _, x := range p {
		out = append(out, x.Id)
	}
	return out
}

func getter_ExampleSetting_SomeJsonData1(buf []byte) (interface{}, error) {
	var err error
	x := &sqlutil.JSON{}
	if len(buf) > 0 {
		err = json.Unmarshal(buf, x)
	}
	return x, err
}

func (p *ExampleSetting) GetSomeJsonData1() (*sqlutil.JSON, error) {
	out, err := p.SomeJsonData1.Get(getter_ExampleSetting_SomeJsonData1)
	if err != nil {
		log.Printf("failed unmarshal sqlutil.JSON, id= %v, err= %v", p.Id, err)
		return nil, err
	}
	return out.(*sqlutil.JSON), nil
}

func (p *ExampleSetting) SetSomeJsonData1(someJsonData1 *sqlutil.JSON) {
	buf, _ := json.Marshal(someJsonData1)
	p.SomeJsonData1.Set(buf, someJsonData1)
}

func getter_ExampleSetting_SomeJsonData2(buf []byte) (interface{}, error) {
	var err error
	x := &CustomJSOMDataObject{}
	if len(buf) > 0 {
		err = json.Unmarshal(buf, x)
	}
	return x, err
}

func (p *ExampleSetting) GetSomeJsonData2() (*CustomJSOMDataObject, error) {
	out, err := p.SomeJsonData2.Get(getter_ExampleSetting_SomeJsonData2)
	if err != nil {
		log.Printf("failed unmarshal CustomJSOMDataObject, id= %v, err= %v", p.Id, err)
		return nil, err
	}
	return out.(*CustomJSOMDataObject), nil
}

func (p *ExampleSetting) SetSomeJsonData2(someJsonData2 *CustomJSOMDataObject) {
	buf, _ := json.Marshal(someJsonData2)
	p.SomeJsonData2.Set(buf, someJsonData2)
}

func getter_ExampleSetting_Config(buf []byte) (interface{}, error) {
	var err error
	x := &ExampleSetting_Config{}
	if len(buf) > 0 {
		err = proto.Unmarshal(buf, x)
	}
	return x, err
}

func (p *ExampleSetting) GetConfig() (*ExampleSetting_Config, error) {
	out, err := p.Config.Get(getter_ExampleSetting_Config)
	if err != nil {
		log.Printf("failed unmarshal ExampleSetting_Config, id= %v, err= %v", p.Id, err)
		return nil, err
	}
	return out.(*ExampleSetting_Config), nil
}

func (p *ExampleSetting) SetConfig(config *ExampleSetting_Config) {
	buf, _ := proto.Marshal(config)
	p.Config.Set(buf, config)
}

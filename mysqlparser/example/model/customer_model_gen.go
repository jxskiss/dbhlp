// Autogenerated by github.com/jxsiss/dbhlp/mysqlparser/gen/run.
// DO NOT EDIT.

package model

import (
	"time"
)

type Customer struct {
	Id                  int64     `db:"id" gorm:"column:id;primaryKey"`                            // int(11)
	FirstName           string    `db:"first_name" gorm:"column:first_name"`                       // varchar(45)
	LastName            string    `db:"last_name" gorm:"column:last_name"`                         // varchar(45)
	Dob                 time.Time `db:"dob" gorm:"column:dob"`                                     // date
	DriverLicenseNumber string    `db:"driver_license_number" gorm:"column:driver_license_number"` // varchar(12)
	Email               string    `db:"email" gorm:"column:email"`                                 // varchar(255)
	Phone               string    `db:"phone" gorm:"column:phone"`                                 // varchar(12)
}

type CustomerList []*Customer

func (p CustomerList) ToIdMap() map[int64]*Customer {
	out := make(map[int64]*Customer, len(p))
	for _, x := range p {
		out[x.Id] = x
	}
	return out
}

func (p CustomerList) PluckIds() []int64 {
	out := make([]int64, 0, len(p))
	for _, x := range p {
		out = append(out, x.Id)
	}
	return out
}

// Autogenerated by github.com/jxsiss/dbhlp/mysqlparser/gen/run.
// DO NOT EDIT.

package model

import (
	"context"
	"encoding/json"
	"log"
	"time"

	"github.com/jxskiss/dbhlp"
	"github.com/jxskiss/errors"
	"github.com/jxskiss/gopkg/v2/utils/sqlutil"
	"google.golang.org/protobuf/proto"
	"gorm.io/gorm"
)

var _ context.Context
var _ json.Marshaler
var _ log.Logger
var _ time.Time
var _ dbhlp.Opt
var _ errors.ErrorGroup
var _ sqlutil.LazyBinary
var _ gorm.DB
var _ proto.Message

type Insurance struct {
	Id   int64  `db:"id" gorm:"column:id;primaryKey"` // int(11)
	Name string `db:"name" gorm:"column:name"`        // varchar(45)
	Cost string `db:"cost" gorm:"column:cost"`        // decimal(13,2) UNSIGNED
}

type InsuranceList []*Insurance

func (p InsuranceList) ToIdMap() map[int64]*Insurance {
	out := make(map[int64]*Insurance, len(p))
	for _, x := range p {
		out[x.Id] = x
	}
	return out
}

func (p InsuranceList) PluckIds() []int64 {
	out := make([]int64, 0, len(p))
	for _, x := range p {
		out = append(out, x.Id)
	}
	return out
}

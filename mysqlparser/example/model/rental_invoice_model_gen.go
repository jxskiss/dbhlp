// Autogenerated by github.com/jxsiss/dbhlp/mysqlparser/gen/run.
// DO NOT EDIT.

package model

type RentalInvoice struct {
	Id                   int64  `db:"id" gorm:"column:id;primaryKey"`                                // int(11)
	CarRent              string `db:"car_rent" gorm:"column:car_rent"`                               // decimal(13,2) UNSIGNED
	EquipmentRentTotal   string `db:"equipment_rent_total" gorm:"column:equipment_rent_total"`       // decimal(13,2) UNSIGNED
	InsuranceCostTotal   string `db:"insurance_cost_total" gorm:"column:insurance_cost_total"`       // decimal(13,2) UNSIGNED
	TaxSurchargesAndFees string `db:"tax_surcharges_and_fees" gorm:"column:tax_surcharges_and_fees"` // decimal(13,2) UNSIGNED
	TotalAmountPayable   string `db:"total_amount_payable" gorm:"column:total_amount_payable"`       // decimal(13,2) UNSIGNED
	DiscountAmount       string `db:"discount_amount" gorm:"column:discount_amount"`                 // decimal(13,2) UNSIGNED
	NetAmountPayable     string `db:"net_amount_payable" gorm:"column:net_amount_payable"`           // decimal(13,2) UNSIGNED
	RentalId             int    `db:"rental_id" gorm:"column:rental_id"`                             // int(11)
}

type RentalInvoiceList []*RentalInvoice

func (p RentalInvoiceList) ToIdMap() map[int64]*RentalInvoice {
	out := make(map[int64]*RentalInvoice, len(p))
	for _, x := range p {
		out[x.Id] = x
	}
	return out
}

func (p RentalInvoiceList) PluckIds() []int64 {
	out := make([]int64, 0, len(p))
	for _, x := range p {
		out = append(out, x.Id)
	}
	return out
}
